apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        releaseconfig {
            storeFile file(keystoreProperties['storeFile'])
            storePassword System.getenv("Store")
            keyAlias keystoreProperties['keyAlias']
            keyPassword System.getenv("Key")
        }
    }
    compileSdkVersion 33
    buildToolsVersion = "33.0.0"
    namespace 'viritualisres.phonevr'
    ndkVersion '25.2.9519653' // r25c
    defaultConfig {
        applicationId "viritualisres.phonevr"
        minSdkVersion 24
        targetSdkVersion 33
        versionCode Integer.valueOf(System.env.APPVEYOR_BUILD_NUMBER ?: 1)
        versionName System.getenv("APPVEYOR_PVR_TAG")
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++17 -fexceptions -frtti" //-DANDROID_USE_LEGACY_TOOLCHAIN_FILE=ON"
            }
        }

        //noinspection ChromeOsAbiSupport
        ndk.abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86'

        defaultPublishConfig 'release'
        publishNonDefault true
        archivesBaseName = "PhoneVR-v$versionCode($versionName)"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            debuggable false
            signingConfig signingConfigs.releaseconfig
        }
        debug {
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
            minifyEnabled false
            externalNativeBuild {
                cmake {
                    cppFlags += "-D_DEBUG=1"
                }
            }
        }
    }
    buildFeatures {
        buildConfig = true // TODO: Remove BuildConifg, Gradle suggests this usage is inefficient > v8 disabled by default
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ["libraries/jni", "../ALVR/build/alvr_client_core"]
        }
    }
    externalNativeBuild {
        cmake {
            // version "3.6.4"
            path "CMakeLists.txt"
        }
    }

    // CompileOptions required for ARCA
    compileOptions
    {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    //noinspection GradleDynamicVersion
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.android.material:material:1.2.1'
    //noinspection GradleDynamicVersion
    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.google.vr:sdk-base:1.200.0@aar'
    implementation 'com.google.cardboard.sdk:cardboard-sdk:1.17.0@aar'
    implementation 'com.google.android.gms:play-services-vision:20.1.3'
    implementation 'com.google.protobuf:protobuf-javalite:3.19.4'

    def acraVersion = '5.7.0'
    implementation "ch.acra:acra-mail:$acraVersion"
    implementation "ch.acra:acra-dialog:$acraVersion"

    implementation platform('com.google.firebase:firebase-bom:26.0.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
}

// The dependencies for NDK builds live inside the .aar files so they need to
// be extracted before NDK targets can link against.
task extractNdk(type: Copy)  {
    copy {
        from zipTree("../cardboard/cardboard-sdk.aar")
        into "libraries/"
        include "jni/**/libGfxPluginCardboard.so"
    }
    copy {
        from zipTree("../gvr-android-sdk-1.200/libraries/sdk-base-1.200.0.aar")
        into "libraries/"
        include "headers/vr/gvr/capi/**/*h"
        include "jni/**/libgvr_audio.so"
        include "jni/**/libgvr.so"
    }
}

task deleteNdk(type: Delete) {
    delete "libraries/"
}

task buildClientLib {
    doLast {
        exec {
            workingDir '../ALVR'
            commandLine 'cargo', 'xtask', 'build-client-lib', '--release', '--no-stdcpp'
        }
    }
}

build.dependsOn(extractNdk)
build.dependsOn(buildClientLib)
clean.dependsOn(deleteNdk)
preBuild.dependsOn(buildClientLib)
