name: Prepare release

env:
  MAIN_PROJECT_MODULE: app
  PROJECT_NAME: PhoneVR

  SOLUTION_FILE_PATH: code\windows\PhoneVR\PhoneVR.sln
  SOLUTION_DIR: code\windows\PhoneVR\

  GRADLE_DIR: code/mobile/android/PhoneVR
  ORG_FULL: PhoneVR-Developers/PhoneVR

permissions:
  checks: write
  pull-requests: write

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Version"
        required: false
        default: ""

jobs:
  Build_PVR_Server:
    name: Build PhoneVR Server
    strategy:
      fail-fast: false
      matrix:
        config: [Release, Debug]
        platform: [x64, x86]
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3

    # https://github.com/actions/runner-images/issues/842#issuecomment-1495115166
    - name: Install MSVC 2015 (v140) and Windows 8.1 SDK
      shell: powershell
      run: |
        $VS_BTOOLS_EXE="vs_buildtools.exe"
        $VS_BTOOLS_URI="https://aka.ms/vs/15/release/vs_buildtools.exe"
        Invoke-WebRequest -Uri $VS_BTOOLS_URI -OutFile $VS_BTOOLS_EXE
        Start-Process -FilePath ./vs_BuildTools.exe -ArgumentList `
        "--add", "Microsoft.VisualStudio.Component.VC.140", `
        "--add", "Microsoft.VisualStudio.Component.Windows81SDK", `
        "--quiet", "--norestart", "--force", "--wait" -Wait -PassThru

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Building ${{matrix.platform}}-${{matrix.config}}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{matrix.config}} /p:Platform=${{matrix.platform}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Build outputs
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-Server-${{ matrix.config }}
        path: ${{ env.SOLUTION_DIR }}\${{ matrix.config }}
  
  Build_APK:
    name: Build Android APK
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          submodules: 'true'

      # Set Current Date As Env Variable
      - name: Set current date as env variable
        id: vars
        shell: bash
        run: |
          echo "date_today=$(date +'%Y-%m-%d')" >> "$GITHUB_ENV"
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Set Up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'oracle'
          java-version: '17'
     
      # Only for Testing github-actions
      - uses: actions-rs/toolchain@v1
        if: ${{ github.event.pull_request.head.repo.full_name != '${{ env.ORG_FULL }}' }} # Only run if not on master repo
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy
      - uses: Swatinem/rust-cache@v2
        if: ${{ github.event.pull_request.head.repo.full_name != '${{ env.ORG_FULL }}' }} # Only run if not on master repo
        with:
          cache-on-failure: true
          workspaces: ${{env.GRADLE_DIR}}/ALVR/
      
      - uses: gradle/gradle-build-action@v2
        if: ${{ github.event.pull_request.head.repo.full_name != '${{ env.ORG_FULL }}' }} # Only run if not on master repo
        with:
          build-root-directory: ${{env.GRADLE_DIR}}
          cache-read-only: ${{ false }}

      - name: Prepare deps
        run: |          
          ls -alh
          cd code/mobile/android/PhoneVR
          chmod +x prepare-alvr-deps.sh
          bash prepare-alvr-deps.sh
      
      - name: Change gradle wrapper permissions
        run: |
          cd code/mobile/android/PhoneVR
          chmod +x ./gradlew
          ls -alh
          ls -alh app

      # Create APK Debug
      - name: Build apk debug project (APK)
        run:  |
          cd code/mobile/android/PhoneVR
          ./gradlew :${{ env.MAIN_PROJECT_MODULE }}:assembleDebug --warning-mode=all --stacktrace -Dorg.gradle.java.home=${{env.JAVA_HOME}}

      # Create APK Release
      - name: Build apk release project (APK)
        env:
          Key: ${{ secrets.KEY }}
          Store: ${{ secrets.STORE }}
        run:  |
          cd code/mobile/android/PhoneVR
          ./gradlew :${{ env.MAIN_PROJECT_MODULE }}:assemble --warning-mode=all --stacktrace -Dorg.gradle.java.home=${{env.JAVA_HOME}}

      # Upload Artifact Build
      # Noted For Output [MAIN_PROJECT_MODULE]/build/outputs/apk/debug/
      - name: Upload APK Debug
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}-debug-${{ steps.vars.outputs.sha_short }}-${{ env.date_today }} APK
          path: ${{env.GRADLE_DIR}}/${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/debug/

      # Noted For Output [MAIN_PROJECT_MODULE]/build/outputs/apk/release/
      - name: Upload APK Release
        uses: actions/upload-artifact@v2
        with:
          name: ${{ env.PROJECT_NAME }}-${{ steps.vars.outputs.sha_short }}-${{ env.date_today }} APK
          path: ${{env.GRADLE_DIR}}/${{ env.MAIN_PROJECT_MODULE }}/build/outputs/apk/release/
  
      - name: Upload Build outputs on failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: build-files
          path: ${{ env.GRADLE_DIR }}/app/.cxx/
  
  prepare_release:
    runs-on: windows-2019
    outputs:
      release_ref: ${{ steps.output_ref.outputs.release_ref }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Configure git
        run: git config --global core.autocrlf false

      # - uses: actions/checkout@v2

      # - uses: actions-rs/toolchain@v1
      #   with:
      #     toolchain: stable

      ### TODO: #74 Stream Line Versioning VisualStudio Desktop Project + Android Studio + ALVR Linking, then can automate bumping
      # - name: Bump version
      #   id: bump_version
      #   env:
      #     RUST_BACKTRACE: 1
      #   run: |
      #     $versionarg = "${{ github.event.inputs.version }}"
      #     $versionarg = If ($versionarg.Length -gt 0) { "--version $versionarg" } else { "" }
      #     $out = cargo xtask bump $versionarg.split()
      #     echo $out
      #     cargo update -p alvr_common
      #     echo "::set-output name=version_tag::$(echo $out | sls -CaseSensitive -Pattern '^v.*$')"

      # - name: Push changes
      #   uses: stefanzweifel/git-auto-commit-action@v4
      #   with:
      #     commit_message: "[Auto] Bump version"

      # - name: Output ref for later checkouts
      #   id: output_ref
      #   run: echo "::set-output name=release_ref::$(git rev-parse HEAD)"

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        # env:
        #   GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # tag_name: ${{ steps.bump_version.outputs.version_tag }}
          tag: ${{ github.event.inputs.version }}
          # release_name: PhoneVR ${{ steps.bump_version.outputs.version_tag }}
          name: PhoneVR ${{ github.event.inputs.version }}
          draft: true
          prerelease: false
          generateReleaseNotes: true
          # commitish: ${{ steps.output_ref.outputs.release_ref }}

  build_windows_streamer:
    runs-on: windows-2019
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-2019 runner.
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
        #   ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install zip unzip vulkan-sdk pkgconfiglite wixtoolset

      - name: Build and package ALVR
        id: build
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          cargo xtask prepare-deps --platform windows --ci
          cargo xtask package-streamer --gpl
          $file = Get-ChildItem -Name .\build\*.exe | Select-Object -f 1
          echo "::set-output name=exe_filename::$file"

      - name: Upload Windows installer (exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/${{ steps.build.outputs.exe_filename }}
          asset_name: ${{ steps.build.outputs.exe_filename }}
          asset_content_type: application/octet-stream
      - name: Upload Windows installer (msi)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/alvr_streamer_windows.msi
          asset_name: alvr_streamer_windows.msi
          asset_content_type: application/octet-stream
      - name: Upload portable streamer for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/alvr_streamer_windows.zip
          asset_name: alvr_streamer_windows.zip
          asset_content_type: application/zip

  build_windows_launcher:
    runs-on: windows-2019
    needs: [prepare_release]
    env:
      # For bindgen to find libclang.dll, we need to give it the path to the Visual Studio package.
      # This is specific to the GitHub windows-2019 runner.
      LIBCLANG_PATH: 'C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\Llvm\x64\bin'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
        #   ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - uses: crazy-max/ghaction-chocolatey@v1
        with:
          args: install zip wixtoolset

      - name: Build and package ALVR
        id: build
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          cargo xtask package-launcher

      - name: Upload portable launcher for Windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/alvr_launcher_windows.zip
          asset_name: alvr_launcher_windows.zip
          asset_content_type: application/zip

  build_linux_streamer:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
        #   ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          sudo apt-get update
          sudo apt-get install libfuse2 build-essential pkg-config nasm libva-dev libdrm-dev libvulkan-dev libx264-dev libx265-dev cmake libasound2-dev libjack-jackd2-dev libxrandr-dev libunwind-dev libffmpeg-nvenc-dev nvidia-cuda-toolkit libgtk-3-dev flatpak flatpak-builder
          cp alvr/xtask/deb/cuda.pc /usr/share/pkgconfig
          sudo flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
          cargo xtask prepare-deps --platform linux
          
      - name: Build and package ALVR (.tar.gz)
        id: build
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          cargo xtask package-streamer

      - name: Upload streamer for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/alvr_streamer_linux.tar.gz
          asset_name: alvr_streamer_linux.tar.gz
          asset_content_type: application/gzip

      - name: Build and package ALVR portable (.AppImage)
        id: build_portable
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          cargo xtask package-streamer --appimage --zsync

      - name: Upload portable streamer for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/ALVR-x86_64.AppImage
          asset_name: ALVR-x86_64.AppImage
          asset_content_type: application/x-executable
      - name: Upload portable streamer for Linux (zsync)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/ALVR-x86_64.AppImage.zsync
          asset_name: ALVR-x86_64.AppImage.zsync
          asset_content_type: application/octet-stream

      - name: Build and package ALVR flatpak (.flatpak)
        id: build_flatpak
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          sudo flatpak-builder --repo=.flatpak-repo --install-deps-from=flathub --force-clean --default-branch=stable --arch=x86_64 .flatpak-build-dir alvr/xtask/flatpak/com.valvesoftware.Steam.Utility.alvr.json
          flatpak build-bundle .flatpak-repo ./build/com.valvesoftware.Steam.Utility.alvr.flatpak com.valvesoftware.Steam.Utility.alvr stable --runtime

      - name: Upload flatpak streamer for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/com.valvesoftware.Steam.Utility.alvr.flatpak
          asset_name: com.valvesoftware.Steam.Utility.alvr.flatpak
          asset_content_type: application/octet-stream

  build_linux_launcher:
    runs-on: ubuntu-latest
    needs: [prepare_release]
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: 'true'
          # ref: ${{ needs.prepare_release.outputs.release_ref }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build and install dependencies
        env:
          RUST_BACKTRACE: 1
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libgtk-3-dev
          
      - name: Build .tar.gz
        id: build
        env:
          RUST_BACKTRACE: 1
        run: |
          cd code/mobile/android/PhoneVR/ALVR
          cargo xtask package-launcher

      - name: Upload launcher for Linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.prepare_release.outputs.upload_url }}
          asset_path: ./code/mobile/android/PhoneVR/ALVR/build/alvr_launcher_linux.tar.gz
          asset_name: alvr_launcher_linux.tar.gz
          asset_content_type: application/gzip